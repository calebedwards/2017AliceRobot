// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.Alice.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4980.Alice.Robot;
import org.usfirst.frc4980.Alice.RobotMap;

/**
 *
 */

// Axis indexes:


public class driveMecanum extends Command {
	public static final int
    LEFT_X_AXIS = 1,
    LEFT_Y_AXIS = 2,
    TRIGGERS = 3,
    RIGHT_X_AXIS = 4,
    RIGHT_Y_AXIS = 5,
    DPAD_LR = 6;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public driveMecanum() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveBase);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
       
       Joystick j3D = Robot.oi.joystick3D;
       Joystick jxBox = Robot.oi.xBox;
      
       double xLeft = jxBox.getRawAxis(LEFT_X_AXIS);
       double yLeft  = jxBox.getRawAxis(LEFT_Y_AXIS);
       double xRight = jxBox.getRawAxis(RIGHT_X_AXIS);
       //double yRight = jxBox.getRawAxis(RIGHT_Y_AXIS);
       
       //MECANUM CARTESIAN
       //x: The speed that the robot should drive in the X direction. [-1.0..1.0]y The speed that the robot should drive in the 
       //Y: direction. This input is inverted to match the forward == -1.0 that joysticks produce. [-1.0..1.0]
       //rotation: The rate of rotation for the robot that is completely independent of the translation. [-1.0..1.0]
       //gyroAngle: The current angle reading from the gyro. Use this to implement field-oriented controls.
       //RobotMap.driveBaseRobotDrive41.mecanumDrive_Cartesian(x, y, rotation, gyroAngle);
       //RobotMap.driveBaseRobotDrive41.mecanumDrive_Cartesian(xLeft, yLeft, xRight, 0.0);
       //RobotMap.driveBaseRobotDrive41.mecanumDrive_Cartesian(j3D.getX(), j3D.getY(), j3D.getTwist(), 0.0);
       
       //MECANUM POLAR
       //magnitude: The speed that the robot should drive in a given direction.
       //direction: The direction the robot should drive in degrees. The direction and maginitute are independent of the rotation rate.rotation 
       //rotation: The rate of rotation for the robot that is completely independent of the magnitute or direction. [-1.0..1.0]
       //RobotMap.driveBaseRobotDrive41.mecanumDrive_Polar(magnitude, direction, rotation);
       RobotMap.driveBaseRobotDrive41.mecanumDrive_Polar(xLeft, yLeft, xRight);
       //RobotMap.driveBaseRobotDrive41.mecanumDrive_Polar(j3D.getX(), j3D.getY(), j3D.getTwist());
       
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
